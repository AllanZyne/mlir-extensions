From fb3fb52995e3441aa8f8abc14006eda6a599c94b Mon Sep 17 00:00:00 2001
From: "Prajapati, Dimple" <dimpalben.r.prajapati@intel.com>
Date: Fri, 1 Dec 2023 12:57:17 -0800
Subject: [PATCH] SPIRV: add SpecConstantComposite Op support in GlobalVarOp

---
 mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp               |  5 +++--
 mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp | 11 ++++++++---
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp b/mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp
index 3906bf74ea72..b39f1607ad7f 100644
--- a/mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp
+++ b/mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp
@@ -1163,9 +1163,10 @@ LogicalResult spirv::GlobalVariableOp::verify() {
     // constants and other variables is supported. They could be normal
     // constants in the module scope as well.
     if (!initOp ||
-        !isa<spirv::GlobalVariableOp, spirv::SpecConstantOp>(initOp)) {
+        !isa<spirv::GlobalVariableOp, spirv::SpecConstantOp, SpecConstantCompositeOp>(initOp)) {
       return emitOpError("initializer must be result of a "
-                         "spirv.SpecConstant or spirv.GlobalVariable op");
+                         "spirv.SpecConstant or spirv.GlobalVariable op or "
+                         "spirv.SpecConstantCompositeOp");
     }
   }

diff --git a/mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp b/mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp
index 44538c38a41b..cc968c0627e9 100644
--- a/mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp
+++ b/mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp
@@ -382,13 +382,18 @@ Serializer::processGlobalVariableOp(spirv::GlobalVariableOp varOp) {
   // Encode StorageClass.
   operands.push_back(static_cast<uint32_t>(varOp.storageClass()));

+  // Encode initialization.
+
   // Encode initialization.
   if (auto initializer = varOp.getInitializer()) {
     auto initializerID = getVariableID(*initializer);
+
     if (!initializerID) {
-      return emitError(varOp.getLoc(),
-                       "invalid usage of undefined variable as initializer");
-    }
+      initializerID = getSpecConstID(*initializer);
+      if (!initializerID)
+        return emitError(varOp.getLoc(),
+                      "invalid usage of undefined variable as initializer");
+   }
     operands.push_back(initializerID);
     elidedAttrs.push_back("initializer");
   }
--
2.34.1
