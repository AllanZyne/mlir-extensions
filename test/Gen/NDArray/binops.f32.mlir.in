// NUMPLACEHOLDERS 2 NUMVARIANTS 8
// PLACEHOLDER OPID 0 18 19 20 21 23 24 25
// PLACEHOLDER RES 15.3 13.1 2.2 2.1 28.82 287.076 10.9 5.95455
// op names: add maximum minimum modulo mult power subtract div
// RUN: %python_executable %imex_runner -i %s -f %p/ndarray.pp -e main -entry-point-result=void --shared-libs=%mlir_c_runner_utils --shared-libs=%mlir_runner_utils | FileCheck %s
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/ndarray-gpu.pp --runner imex-cpu-runner -e main --entry-point-result=void --shared-libs=%mlir_c_runner_utils,%mlir_runner_utils,%irunner_utils,%levelzero_runtime --filecheck

func.func private @printMemrefF32(%ptr : tensor<*xf32>)

func.func @main() {
    %i5 = arith.constant 5 : index
    %c2 = arith.constant 2.2 : f32
    %c13 = arith.constant 13.1 : f32

    %0 = ndarray.create %i5 value %c13 {dtype = 1 : i8} : (index, f32) -> !ndarray.ndarray<5xf32>
    %1 = ndarray.create %i5 value %c2 {dtype = 1 : i8} : (index, f32) -> !ndarray.ndarray<5xf32>

    call @test_op(%0, %1) : (!ndarray.ndarray<5xf32>, !ndarray.ndarray<5xf32>) -> ()

    return
}

func.func @test_op(%a : !ndarray.ndarray<5xf32>, %b : !ndarray.ndarray<5xf32>) {
    %0 ="ndarray.ewbin"(%a, %b) {op = @OPID@ : i32} : (!ndarray.ndarray<5xf32>, !ndarray.ndarray<5xf32>) -> !ndarray.ndarray<5xf32>
    %1 = builtin.unrealized_conversion_cast %0 : !ndarray.ndarray<5xf32> to tensor<5xf32>
    %2 = tensor.cast %1 : tensor<5xf32> to tensor<*xf32>
    call @printMemrefF32(%2) : (tensor<*xf32>) -> ()
    // CHECK: Unranked Memref base@ = {{(0x)?[-9a-f]*}}
    // CHECK-SAME: rank = 1 offset = 0 sizes = [5] strides = [1] data =
    // CHECK-NEXT: [@RES@,  @RES@,  @RES@,  @RES@,  @RES@]

    return
}
