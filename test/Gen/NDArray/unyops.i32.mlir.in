// NUMPLACEHOLDERS 3 NUMVARIANTS 3
// PLACEHOLDER OPID 0 30 31
// PLACEHOLDER VALUE -5 5 5
// PLACEHOLDER RES 5 -5 5
// op names: abs negative
// RUN: %python_executable %imex_runner -i %s -f %p/ndarray.pp -e main -entry-point-result=void --shared-libs=%mlir_c_runner_utils --shared-libs=%mlir_runner_utils | FileCheck %s
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/ndarray-gpu.pp --runner imex-cpu-runner -e main --entry-point-result=void --shared-libs=%mlir_c_runner_utils,%mlir_runner_utils,%irunner_utils,%levelzero_runtime --filecheck

func.func private @printMemrefI32(%ptr : tensor<*xi32>)

func.func @main() {
    %i5 = arith.constant 5 : index
    %c0 = arith.constant @VALUE@ : i32

    %0 = ndarray.create %i5 value %c0 {dtype = 1 : i8} : (index, i32) -> !ndarray.ndarray<5xi32>

    call @test_op(%0) : (!ndarray.ndarray<5xi32>) -> ()

    return
}

func.func @test_op(%a : !ndarray.ndarray<5xi32>) {
    %0 ="ndarray.ewuny"(%a) {op = @OPID@ : i32} : (!ndarray.ndarray<5xi32>) -> !ndarray.ndarray<5xi32>
    %1 = builtin.unrealized_conversion_cast %0 : !ndarray.ndarray<5xi32> to tensor<5xi32>
    %2 = tensor.cast %1 : tensor<5xi32> to tensor<*xi32>
    call @printMemrefI32(%2) : (tensor<*xi32>) -> ()
    // CHECK: Unranked Memref base@ = {{(0x)?[-9a-f]*}}
    // CHECK-SAME: rank = 1 offset = 0 sizes = [5] strides = [1] data =
    // CHECK-NEXT: [@RES@,  @RES@,  @RES@,  @RES@,  @RES@]

    return
}
