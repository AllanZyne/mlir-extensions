// RUN: %python_executable %imex_runner -i %s --pass-pipeline-file=%p/linalg-to-cpu.pp \
// RUN:                                       --runner mlir-cpu-runner -e main \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils \
// RUN:                                       --entry-point-result=void | FileCheck %s
#map0 = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1) -> ()>
module @relu {
func.func @main() {
    %0= arith.constant dense<[[-0.125, -0.25, -0.375, 0.375, 0.5], [0.125, -0.25, 0.375, -0.375, 0.5], [0.125, 0.25, 0.375, -0.375, -0.5], [0.125, 0.25, 0.375, 0.375, 0.5]]>:tensor<4x5x@DTYPE@>
    %1 = call @test(%0) : (tensor<4x5x@DTYPE@>) -> tensor<4x5x@DTYPE@>
    %unranked = tensor.cast %1 : tensor<4x5x@DTYPE@>to tensor<*x@DTYPE@>
    call @PRINTDTYPE@(%unranked) : (tensor<*x@DTYPE@>) -> ()
    return
}
func.func private @PRINTDTYPE@(tensor<*x@DTYPE@>)
func.func @test(%arg0: tensor<4x5x@DTYPE@>)->tensor<4x5x@DTYPE@>{
    %cst = arith.constant 0.000000e+00 : @DTYPE@
    %0 = tensor.empty() : tensor<4x5xi1>
    %1 = linalg.generic {indexing_maps = [#map0, #map1, #map0], iterator_types = ["parallel", "parallel"]} ins(%arg0, %cst : tensor<4x5x@DTYPE@>, @DTYPE@) outs(%0 : tensor<4x5xi1>) {
    ^bb0(%arg1: @DTYPE@, %arg2: @DTYPE@, %arg3: i1):
      %4 = arith.cmpf olt, %arg1, %arg2 : @DTYPE@
      linalg.yield %4 : i1
    } -> tensor<4x5xi1>
    %2 = tensor.empty() : tensor<4x5x@DTYPE@>
    %3 = linalg.generic {indexing_maps = [#map0, #map1, #map0, #map0], iterator_types = ["parallel", "parallel"]} ins(%1, %cst, %arg0 : tensor<4x5xi1>, @DTYPE@, tensor<4x5x@DTYPE@>) outs(%2 : tensor<4x5x@DTYPE@>) {
    ^bb0(%arg1: i1, %arg2: @DTYPE@, %arg3: @DTYPE@, %arg4: @DTYPE@):
      %4 = arith.select %arg1, %arg2, %arg3 : @DTYPE@
      linalg.yield %4 : @DTYPE@
    } -> tensor<4x5x@DTYPE@>
    return %3 : tensor<4x5x@DTYPE@>
  }
}
// CHECK: Unranked Memref base@ = {{0x[-9a-f]*}}
// CHECK-SAME: rank = {{.}} offset = {{.}} sizes = [4, 5] strides = {{.*}} data =
// CHECK:   0
// CHECK:   0
// CHECK:   0
// CHECK:   0.375
// CHECK:   0.5
// CHECK:   0.125
// CHECK:   0
// CHECK:   0.375
// CHECK:   0
// CHECK:   0.5
// CHECK:   0.125
// CHECK:   0.25
// CHECK:   0.375
// CHECK:   0
// CHECK:   0
// CHECK:   0.125
// CHECK:   0.25
// CHECK:   0.375
// CHECK:   0.375
// CHECK:   0.5
